generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Assuming PostgreSQL based on Neon/Supabase context
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(cuid())
  username    String @unique
  email       String @unique
  password    String
  rating      Int    @default(1200)

  whiteGames  Game[] @relation("WhiteGames")
  blackGames  Game[] @relation("BlackGames")
}

model Game {
  id            String    @id @default(cuid())
  gameId        String    @unique // Unique ID for the game session, used in URL
  playerWhiteId String?   // Nullable until a player joins
  type          String?    // "public", "private", "rated", "casual"
  playerBlackId String?   // Nullable until a player joins
  winnerId      String?   // ID of the winning player
  loserId       String?   // ID of the losing player
  draw          Boolean?
  status        String    // "waiting", "playing", "finished", "abandoned"
  currentTurn   String?   // "white" or "black" - only relevant when playing
  fen           String?   // Current FEN string - only relevant when playing
  moves         Json      @default("[]") // Array of moves
  duration      Int?      // Total duration in seconds
  startTime     DateTime  @default(now())
  endTime       DateTime?
  createdAt     DateTime  @default(now()) // Added createdAt field
  ratingChange  Int?      // Rating change after game end

  playerWhite   User?     @relation("WhiteGames", fields: [playerWhiteId], references: [id])
  playerBlack   User?     @relation("BlackGames", fields: [playerBlackId], references: [id])
}
